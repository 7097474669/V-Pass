{"version":3,"file":"dynamic-input-width.js","sources":["dynamic-input-width/lib/dynamic-input-width.directive.ts","dynamic-input-width/lib/dynamic-input.module.ts","dynamic-input-width/public-api.ts","dynamic-input-width/dynamic-input-width.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\n\nexport type DynamicWidthDirectiveParams = {\n  minWidth: number;\n  maxWidth: number;\n};\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[dynamicWidth]',\n})\nexport class DynamicWidthDirective implements OnInit, OnDestroy {\n  private unsubscribe: any;\n  private element: HTMLInputElement | HTMLTextAreaElement;\n\n  @Input('dynamicWidth') params: DynamicWidthDirectiveParams;\n\n  constructor(readonly renderer: Renderer2, readonly elementRef: ElementRef) {}\n\n  ngOnInit() {\n    const element = this.elementRef.nativeElement as HTMLElement;\n    const tag = element.tagName.toLowerCase();\n\n    if (tag === 'input' || tag === 'textarea') {\n      this.element = element as HTMLInputElement | HTMLTextAreaElement;\n      this.unsubscribe = this.renderer.listen(\n        this.elementRef.nativeElement,\n        'keyup',\n        () => {\n          this.adjustWidth();\n        }\n      );\n\n      setTimeout(() => {\n        this.adjustWidth();\n      }, 10);\n    }\n  }\n\n  ngOnDestroy() {\n    if (!this.unsubscribe) {\n      return;\n    }\n    this.unsubscribe();\n  }\n\n  // Public metoda pro \"manualni\" prepočet šířky, když se změní model. Input sám o změně bohužel neví\n  // Programátor na to musí pamatovat :(\n  triggerRecalculate() {\n    setTimeout(() => {\n      this.adjustWidth();\n    });\n  }\n\n  private adjustWidth() {\n    const { minWidth, maxWidth } = this.params;\n\n    if (!minWidth || !maxWidth) {\n      return;\n    }\n\n    const fakeElement = document.createElement('span');\n    fakeElement.textContent = this.element.value;\n    // Firefox has annonying behaviour. It does not know the \"shortcut properties\" like 'font' or 'padding'\n    // You have to type the full property name.\n    const styleProps = [\n      'font-size',\n      'font-family',\n      'letter-spacing',\n      'line-height',\n      'padding-left',\n      'padding-height',\n    ];\n    const style = getComputedStyle(this.elementRef.nativeElement);\n    styleProps.forEach((prop) => {\n      fakeElement.style[prop] = style[prop];\n    });\n\n    // get width\n    fakeElement.style.visibility = 'hidden';\n    document.body.append(fakeElement);\n    let width = fakeElement.offsetWidth;\n    fakeElement.remove();\n\n    if (width > maxWidth) {\n      width = maxWidth - 15;\n    }\n\n    if (width > minWidth && width <= maxWidth) {\n      // 26px is \"buffer\", so that the text-ellipsis is not shown.\n      // It used to be 18px. It seems that Chrome has changed behaviour of input boxes.\n      this.element.style.width = `${width + 26}px`;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { DynamicWidthDirective } from './dynamic-input-width.directive';\n\n@NgModule({\n  declarations: [DynamicWidthDirective],\n  imports: [],\n  exports: [DynamicWidthDirective],\n})\nexport class DynamicInputModule {}\n","/*\n * Public API Surface of dynamic-input\n */\n\nexport * from './lib/dynamic-input-width.directive';\nexport * from './lib/dynamic-input.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}