import { __decorate } from 'tslib';
import { Renderer2, ElementRef, Input, Directive, NgModule } from '@angular/core';

import * as ɵngcc0 from '@angular/core';
let DynamicWidthDirective = class DynamicWidthDirective {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    ngOnInit() {
        const element = this.elementRef.nativeElement;
        const tag = element.tagName.toLowerCase();
        if (tag === 'input' || tag === 'textarea') {
            this.element = element;
            this.unsubscribe = this.renderer.listen(this.elementRef.nativeElement, 'keyup', () => {
                this.adjustWidth();
            });
            setTimeout(() => {
                this.adjustWidth();
            }, 10);
        }
    }
    ngOnDestroy() {
        if (!this.unsubscribe) {
            return;
        }
        this.unsubscribe();
    }
    // Public metoda pro "manualni" prepočet šířky, když se změní model. Input sám o změně bohužel neví
    // Programátor na to musí pamatovat :(
    triggerRecalculate() {
        setTimeout(() => {
            this.adjustWidth();
        });
    }
    adjustWidth() {
        const { minWidth, maxWidth } = this.params;
        if (!minWidth || !maxWidth) {
            return;
        }
        const fakeElement = document.createElement('span');
        fakeElement.textContent = this.element.value;
        // Firefox has annonying behaviour. It does not know the "shortcut properties" like 'font' or 'padding'
        // You have to type the full property name.
        const styleProps = [
            'font-size',
            'font-family',
            'letter-spacing',
            'line-height',
            'padding-left',
            'padding-height',
        ];
        const style = getComputedStyle(this.elementRef.nativeElement);
        styleProps.forEach((prop) => {
            fakeElement.style[prop] = style[prop];
        });
        // get width
        fakeElement.style.visibility = 'hidden';
        document.body.append(fakeElement);
        let width = fakeElement.offsetWidth;
        fakeElement.remove();
        if (width > maxWidth) {
            width = maxWidth - 15;
        }
        if (width > minWidth && width <= maxWidth) {
            // 26px is "buffer", so that the text-ellipsis is not shown.
            // It used to be 18px. It seems that Chrome has changed behaviour of input boxes.
            this.element.style.width = `${width + 26}px`;
        }
    }
};
DynamicWidthDirective.ɵfac = function DynamicWidthDirective_Factory(t) { return new (t || DynamicWidthDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DynamicWidthDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DynamicWidthDirective, selectors: [["", "dynamicWidth", ""]], inputs: { params: ["dynamicWidth", "params"] } });
DynamicWidthDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
__decorate([
    Input('dynamicWidth')
], DynamicWidthDirective.prototype, "params", void 0);

let DynamicInputModule = class DynamicInputModule {
};
DynamicInputModule.ɵfac = function DynamicInputModule_Factory(t) { return new (t || DynamicInputModule)(); };
DynamicInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DynamicInputModule });
DynamicInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicWidthDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[dynamicWidth]'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { params: [{
            type: Input,
            args: ['dynamicWidth']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicInputModule, [{
        type: NgModule,
        args: [{
                declarations: [DynamicWidthDirective],
                imports: [],
                exports: [DynamicWidthDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DynamicInputModule, { declarations: [DynamicWidthDirective], exports: [DynamicWidthDirective] }); })();

/*
 * Public API Surface of dynamic-input
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DynamicInputModule, DynamicWidthDirective };

//# sourceMappingURL=dynamic-input-width.js.map