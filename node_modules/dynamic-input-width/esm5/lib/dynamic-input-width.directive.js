import { __decorate } from "tslib";
import { Directive, ElementRef, Input, OnDestroy, OnInit, Renderer2, } from '@angular/core';
var DynamicWidthDirective = /** @class */ (function () {
    function DynamicWidthDirective(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    DynamicWidthDirective.prototype.ngOnInit = function () {
        var _this = this;
        var element = this.elementRef.nativeElement;
        var tag = element.tagName.toLowerCase();
        if (tag === 'input' || tag === 'textarea') {
            this.element = element;
            this.unsubscribe = this.renderer.listen(this.elementRef.nativeElement, 'keyup', function () {
                _this.adjustWidth();
            });
            setTimeout(function () {
                _this.adjustWidth();
            }, 10);
        }
    };
    DynamicWidthDirective.prototype.ngOnDestroy = function () {
        if (!this.unsubscribe) {
            return;
        }
        this.unsubscribe();
    };
    // Public metoda pro "manualni" prepočet šířky, když se změní model. Input sám o změně bohužel neví
    // Programátor na to musí pamatovat :(
    DynamicWidthDirective.prototype.triggerRecalculate = function () {
        var _this = this;
        setTimeout(function () {
            _this.adjustWidth();
        });
    };
    DynamicWidthDirective.prototype.adjustWidth = function () {
        var _a = this.params, minWidth = _a.minWidth, maxWidth = _a.maxWidth;
        if (!minWidth || !maxWidth) {
            return;
        }
        var fakeElement = document.createElement('span');
        fakeElement.textContent = this.element.value;
        // Firefox has annonying behaviour. It does not know the "shortcut properties" like 'font' or 'padding'
        // You have to type the full property name.
        var styleProps = [
            'font-size',
            'font-family',
            'letter-spacing',
            'line-height',
            'padding-left',
            'padding-height',
        ];
        var style = getComputedStyle(this.elementRef.nativeElement);
        styleProps.forEach(function (prop) {
            fakeElement.style[prop] = style[prop];
        });
        // get width
        fakeElement.style.visibility = 'hidden';
        document.body.append(fakeElement);
        var width = fakeElement.offsetWidth;
        fakeElement.remove();
        if (width > maxWidth) {
            width = maxWidth - 15;
        }
        if (width > minWidth && width <= maxWidth) {
            // 26px is "buffer", so that the text-ellipsis is not shown.
            // It used to be 18px. It seems that Chrome has changed behaviour of input boxes.
            this.element.style.width = width + 26 + "px";
        }
    };
    DynamicWidthDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    __decorate([
        Input('dynamicWidth')
    ], DynamicWidthDirective.prototype, "params", void 0);
    DynamicWidthDirective = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[dynamicWidth]',
        })
    ], DynamicWidthDirective);
    return DynamicWidthDirective;
}());
export { DynamicWidthDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1pbnB1dC13aWR0aC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9keW5hbWljLWlucHV0LXdpZHRoLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWMtaW5wdXQtd2lkdGguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFXdkI7SUFNRSwrQkFBcUIsUUFBbUIsRUFBVyxVQUFzQjtRQUFwRCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVcsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFHLENBQUM7SUFFN0Usd0NBQVEsR0FBUjtRQUFBLGlCQWtCQztRQWpCQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQTRCLENBQUM7UUFDN0QsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUUxQyxJQUFJLEdBQUcsS0FBSyxPQUFPLElBQUksR0FBRyxLQUFLLFVBQVUsRUFBRTtZQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQWlELENBQUM7WUFDakUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDckMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQzdCLE9BQU8sRUFDUDtnQkFDRSxLQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDckIsQ0FBQyxDQUNGLENBQUM7WUFFRixVQUFVLENBQUM7Z0JBQ1QsS0FBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3JCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNSO0lBQ0gsQ0FBQztJQUVELDJDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELG1HQUFtRztJQUNuRyxzQ0FBc0M7SUFDdEMsa0RBQWtCLEdBQWxCO1FBQUEsaUJBSUM7UUFIQyxVQUFVLENBQUM7WUFDVCxLQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sMkNBQVcsR0FBbkI7UUFDUSxJQUFBLGdCQUFvQyxFQUFsQyxzQkFBUSxFQUFFLHNCQUF3QixDQUFDO1FBRTNDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDMUIsT0FBTztTQUNSO1FBRUQsSUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRCxXQUFXLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzdDLHVHQUF1RztRQUN2RywyQ0FBMkM7UUFDM0MsSUFBTSxVQUFVLEdBQUc7WUFDakIsV0FBVztZQUNYLGFBQWE7WUFDYixnQkFBZ0I7WUFDaEIsYUFBYTtZQUNiLGNBQWM7WUFDZCxnQkFBZ0I7U0FDakIsQ0FBQztRQUNGLElBQU0sS0FBSyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDOUQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQUk7WUFDdEIsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxZQUFZO1FBQ1osV0FBVyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO1FBQ3hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xDLElBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUM7UUFDcEMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRXJCLElBQUksS0FBSyxHQUFHLFFBQVEsRUFBRTtZQUNwQixLQUFLLEdBQUcsUUFBUSxHQUFHLEVBQUUsQ0FBQztTQUN2QjtRQUVELElBQUksS0FBSyxHQUFHLFFBQVEsSUFBSSxLQUFLLElBQUksUUFBUSxFQUFFO1lBQ3pDLDREQUE0RDtZQUM1RCxpRkFBaUY7WUFDakYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFNLEtBQUssR0FBRyxFQUFFLE9BQUksQ0FBQztTQUM5QztJQUNILENBQUM7O2dCQTVFOEIsU0FBUztnQkFBdUIsVUFBVTs7SUFGbEQ7UUFBdEIsS0FBSyxDQUFDLGNBQWMsQ0FBQzt5REFBcUM7SUFKaEQscUJBQXFCO1FBSmpDLFNBQVMsQ0FBQztZQUNULDhDQUE4QztZQUM5QyxRQUFRLEVBQUUsZ0JBQWdCO1NBQzNCLENBQUM7T0FDVyxxQkFBcUIsQ0FtRmpDO0lBQUQsNEJBQUM7Q0FBQSxBQW5GRCxJQW1GQztTQW5GWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgUmVuZGVyZXIyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IHR5cGUgRHluYW1pY1dpZHRoRGlyZWN0aXZlUGFyYW1zID0ge1xuICBtaW5XaWR0aDogbnVtYmVyO1xuICBtYXhXaWR0aDogbnVtYmVyO1xufTtcblxuQERpcmVjdGl2ZSh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdbZHluYW1pY1dpZHRoXScsXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNXaWR0aERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSB1bnN1YnNjcmliZTogYW55O1xuICBwcml2YXRlIGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50O1xuXG4gIEBJbnB1dCgnZHluYW1pY1dpZHRoJykgcGFyYW1zOiBEeW5hbWljV2lkdGhEaXJlY3RpdmVQYXJhbXM7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29uc3QgdGFnID0gZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAodGFnID09PSAnaW5wdXQnIHx8IHRhZyA9PT0gJ3RleHRhcmVhJykge1xuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudDtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnJlbmRlcmVyLmxpc3RlbihcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICdrZXl1cCcsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkanVzdFdpZHRoKCk7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmFkanVzdFdpZHRoKCk7XG4gICAgICB9LCAxMCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIC8vIFB1YmxpYyBtZXRvZGEgcHJvIFwibWFudWFsbmlcIiBwcmVwb8SNZXQgxaHDrcWZa3ksIGtkecW+IHNlIHptxJtuw60gbW9kZWwuIElucHV0IHPDoW0gbyB6bcSbbsSbIGJvaHXFvmVsIG5ldsOtXG4gIC8vIFByb2dyYW3DoXRvciBuYSB0byBtdXPDrSBwYW1hdG92YXQgOihcbiAgdHJpZ2dlclJlY2FsY3VsYXRlKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5hZGp1c3RXaWR0aCgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGp1c3RXaWR0aCgpIHtcbiAgICBjb25zdCB7IG1pbldpZHRoLCBtYXhXaWR0aCB9ID0gdGhpcy5wYXJhbXM7XG5cbiAgICBpZiAoIW1pbldpZHRoIHx8ICFtYXhXaWR0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGZha2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGZha2VFbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5lbGVtZW50LnZhbHVlO1xuICAgIC8vIEZpcmVmb3ggaGFzIGFubm9ueWluZyBiZWhhdmlvdXIuIEl0IGRvZXMgbm90IGtub3cgdGhlIFwic2hvcnRjdXQgcHJvcGVydGllc1wiIGxpa2UgJ2ZvbnQnIG9yICdwYWRkaW5nJ1xuICAgIC8vIFlvdSBoYXZlIHRvIHR5cGUgdGhlIGZ1bGwgcHJvcGVydHkgbmFtZS5cbiAgICBjb25zdCBzdHlsZVByb3BzID0gW1xuICAgICAgJ2ZvbnQtc2l6ZScsXG4gICAgICAnZm9udC1mYW1pbHknLFxuICAgICAgJ2xldHRlci1zcGFjaW5nJyxcbiAgICAgICdsaW5lLWhlaWdodCcsXG4gICAgICAncGFkZGluZy1sZWZ0JyxcbiAgICAgICdwYWRkaW5nLWhlaWdodCcsXG4gICAgXTtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIHN0eWxlUHJvcHMuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgZmFrZUVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZVtwcm9wXTtcbiAgICB9KTtcblxuICAgIC8vIGdldCB3aWR0aFxuICAgIGZha2VFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChmYWtlRWxlbWVudCk7XG4gICAgbGV0IHdpZHRoID0gZmFrZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgZmFrZUVsZW1lbnQucmVtb3ZlKCk7XG5cbiAgICBpZiAod2lkdGggPiBtYXhXaWR0aCkge1xuICAgICAgd2lkdGggPSBtYXhXaWR0aCAtIDE1O1xuICAgIH1cblxuICAgIGlmICh3aWR0aCA+IG1pbldpZHRoICYmIHdpZHRoIDw9IG1heFdpZHRoKSB7XG4gICAgICAvLyAyNnB4IGlzIFwiYnVmZmVyXCIsIHNvIHRoYXQgdGhlIHRleHQtZWxsaXBzaXMgaXMgbm90IHNob3duLlxuICAgICAgLy8gSXQgdXNlZCB0byBiZSAxOHB4LiBJdCBzZWVtcyB0aGF0IENocm9tZSBoYXMgY2hhbmdlZCBiZWhhdmlvdXIgb2YgaW5wdXQgYm94ZXMuXG4gICAgICB0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHt3aWR0aCArIDI2fXB4YDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==