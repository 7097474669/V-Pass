import { __decorate } from "tslib";
import { Directive, ElementRef, Input, OnDestroy, OnInit, Renderer2, } from '@angular/core';
let DynamicWidthDirective = class DynamicWidthDirective {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    ngOnInit() {
        const element = this.elementRef.nativeElement;
        const tag = element.tagName.toLowerCase();
        if (tag === 'input' || tag === 'textarea') {
            this.element = element;
            this.unsubscribe = this.renderer.listen(this.elementRef.nativeElement, 'keyup', () => {
                this.adjustWidth();
            });
            setTimeout(() => {
                this.adjustWidth();
            }, 10);
        }
    }
    ngOnDestroy() {
        if (!this.unsubscribe) {
            return;
        }
        this.unsubscribe();
    }
    // Public metoda pro "manualni" prepočet šířky, když se změní model. Input sám o změně bohužel neví
    // Programátor na to musí pamatovat :(
    triggerRecalculate() {
        setTimeout(() => {
            this.adjustWidth();
        });
    }
    adjustWidth() {
        const { minWidth, maxWidth } = this.params;
        if (!minWidth || !maxWidth) {
            return;
        }
        const fakeElement = document.createElement('span');
        fakeElement.textContent = this.element.value;
        // Firefox has annonying behaviour. It does not know the "shortcut properties" like 'font' or 'padding'
        // You have to type the full property name.
        const styleProps = [
            'font-size',
            'font-family',
            'letter-spacing',
            'line-height',
            'padding-left',
            'padding-height',
        ];
        const style = getComputedStyle(this.elementRef.nativeElement);
        styleProps.forEach((prop) => {
            fakeElement.style[prop] = style[prop];
        });
        // get width
        fakeElement.style.visibility = 'hidden';
        document.body.append(fakeElement);
        let width = fakeElement.offsetWidth;
        fakeElement.remove();
        if (width > maxWidth) {
            width = maxWidth - 15;
        }
        if (width > minWidth && width <= maxWidth) {
            // 26px is "buffer", so that the text-ellipsis is not shown.
            // It used to be 18px. It seems that Chrome has changed behaviour of input boxes.
            this.element.style.width = `${width + 26}px`;
        }
    }
};
DynamicWidthDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
__decorate([
    Input('dynamicWidth')
], DynamicWidthDirective.prototype, "params", void 0);
DynamicWidthDirective = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[dynamicWidth]',
    })
], DynamicWidthDirective);
export { DynamicWidthDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1pbnB1dC13aWR0aC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9keW5hbWljLWlucHV0LXdpZHRoLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWMtaW5wdXQtd2lkdGguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFXdkIsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFNaEMsWUFBcUIsUUFBbUIsRUFBVyxVQUFzQjtRQUFwRCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVcsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFHLENBQUM7SUFFN0UsUUFBUTtRQUNOLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBNEIsQ0FBQztRQUM3RCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTFDLElBQUksR0FBRyxLQUFLLE9BQU8sSUFBSSxHQUFHLEtBQUssVUFBVSxFQUFFO1lBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBaUQsQ0FBQztZQUNqRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUNyQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFDN0IsT0FBTyxFQUNQLEdBQUcsRUFBRTtnQkFDSCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDckIsQ0FBQyxDQUNGLENBQUM7WUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNyQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDUjtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxtR0FBbUc7SUFDbkcsc0NBQXNDO0lBQ3RDLGtCQUFrQjtRQUNoQixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLFdBQVc7UUFDakIsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRTNDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDMUIsT0FBTztTQUNSO1FBRUQsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRCxXQUFXLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzdDLHVHQUF1RztRQUN2RywyQ0FBMkM7UUFDM0MsTUFBTSxVQUFVLEdBQUc7WUFDakIsV0FBVztZQUNYLGFBQWE7WUFDYixnQkFBZ0I7WUFDaEIsYUFBYTtZQUNiLGNBQWM7WUFDZCxnQkFBZ0I7U0FDakIsQ0FBQztRQUNGLE1BQU0sS0FBSyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDOUQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzFCLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO1FBRUgsWUFBWTtRQUNaLFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztRQUN4QyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsQyxJQUFJLEtBQUssR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDO1FBQ3BDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVyQixJQUFJLEtBQUssR0FBRyxRQUFRLEVBQUU7WUFDcEIsS0FBSyxHQUFHLFFBQVEsR0FBRyxFQUFFLENBQUM7U0FDdkI7UUFFRCxJQUFJLEtBQUssR0FBRyxRQUFRLElBQUksS0FBSyxJQUFJLFFBQVEsRUFBRTtZQUN6Qyw0REFBNEQ7WUFDNUQsaUZBQWlGO1lBQ2pGLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLEtBQUssR0FBRyxFQUFFLElBQUksQ0FBQztTQUM5QztJQUNILENBQUM7Q0FDRixDQUFBOztZQTdFZ0MsU0FBUztZQUF1QixVQUFVOztBQUZsRDtJQUF0QixLQUFLLENBQUMsY0FBYyxDQUFDO3FEQUFxQztBQUpoRCxxQkFBcUI7SUFKakMsU0FBUyxDQUFDO1FBQ1QsOENBQThDO1FBQzlDLFFBQVEsRUFBRSxnQkFBZ0I7S0FDM0IsQ0FBQztHQUNXLHFCQUFxQixDQW1GakM7U0FuRlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFJlbmRlcmVyMixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIER5bmFtaWNXaWR0aERpcmVjdGl2ZVBhcmFtcyA9IHtcbiAgbWluV2lkdGg6IG51bWJlcjtcbiAgbWF4V2lkdGg6IG51bWJlcjtcbn07XG5cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnW2R5bmFtaWNXaWR0aF0nLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljV2lkdGhEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgdW5zdWJzY3JpYmU6IGFueTtcbiAgcHJpdmF0ZSBlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudDtcblxuICBASW5wdXQoJ2R5bmFtaWNXaWR0aCcpIHBhcmFtczogRHluYW1pY1dpZHRoRGlyZWN0aXZlUGFyYW1zO1xuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlbmRlcmVyOiBSZW5kZXJlcjIsIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IHRhZyA9IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaWYgKHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oXG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgICAna2V5dXAnLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGp1c3RXaWR0aCgpO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5hZGp1c3RXaWR0aCgpO1xuICAgICAgfSwgMTApO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICAvLyBQdWJsaWMgbWV0b2RhIHBybyBcIm1hbnVhbG5pXCIgcHJlcG/EjWV0IMWhw63FmWt5LCBrZHnFviBzZSB6bcSbbsOtIG1vZGVsLiBJbnB1dCBzw6FtIG8gem3Em27EmyBib2h1xb5lbCBuZXbDrVxuICAvLyBQcm9ncmFtw6F0b3IgbmEgdG8gbXVzw60gcGFtYXRvdmF0IDooXG4gIHRyaWdnZXJSZWNhbGN1bGF0ZSgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuYWRqdXN0V2lkdGgoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYWRqdXN0V2lkdGgoKSB7XG4gICAgY29uc3QgeyBtaW5XaWR0aCwgbWF4V2lkdGggfSA9IHRoaXMucGFyYW1zO1xuXG4gICAgaWYgKCFtaW5XaWR0aCB8fCAhbWF4V2lkdGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBmYWtlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBmYWtlRWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuZWxlbWVudC52YWx1ZTtcbiAgICAvLyBGaXJlZm94IGhhcyBhbm5vbnlpbmcgYmVoYXZpb3VyLiBJdCBkb2VzIG5vdCBrbm93IHRoZSBcInNob3J0Y3V0IHByb3BlcnRpZXNcIiBsaWtlICdmb250JyBvciAncGFkZGluZydcbiAgICAvLyBZb3UgaGF2ZSB0byB0eXBlIHRoZSBmdWxsIHByb3BlcnR5IG5hbWUuXG4gICAgY29uc3Qgc3R5bGVQcm9wcyA9IFtcbiAgICAgICdmb250LXNpemUnLFxuICAgICAgJ2ZvbnQtZmFtaWx5JyxcbiAgICAgICdsZXR0ZXItc3BhY2luZycsXG4gICAgICAnbGluZS1oZWlnaHQnLFxuICAgICAgJ3BhZGRpbmctbGVmdCcsXG4gICAgICAncGFkZGluZy1oZWlnaHQnLFxuICAgIF07XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICBzdHlsZVByb3BzLmZvckVhY2goKHByb3ApID0+IHtcbiAgICAgIGZha2VFbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVbcHJvcF07XG4gICAgfSk7XG5cbiAgICAvLyBnZXQgd2lkdGhcbiAgICBmYWtlRWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmQoZmFrZUVsZW1lbnQpO1xuICAgIGxldCB3aWR0aCA9IGZha2VFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgIGZha2VFbGVtZW50LnJlbW92ZSgpO1xuXG4gICAgaWYgKHdpZHRoID4gbWF4V2lkdGgpIHtcbiAgICAgIHdpZHRoID0gbWF4V2lkdGggLSAxNTtcbiAgICB9XG5cbiAgICBpZiAod2lkdGggPiBtaW5XaWR0aCAmJiB3aWR0aCA8PSBtYXhXaWR0aCkge1xuICAgICAgLy8gMjZweCBpcyBcImJ1ZmZlclwiLCBzbyB0aGF0IHRoZSB0ZXh0LWVsbGlwc2lzIGlzIG5vdCBzaG93bi5cbiAgICAgIC8vIEl0IHVzZWQgdG8gYmUgMThweC4gSXQgc2VlbXMgdGhhdCBDaHJvbWUgaGFzIGNoYW5nZWQgYmVoYXZpb3VyIG9mIGlucHV0IGJveGVzLlxuICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gYCR7d2lkdGggKyAyNn1weGA7XG4gICAgfVxuICB9XG59XG4iXX0=