import { __decorate } from 'tslib';
import { Renderer2, ElementRef, Input, Directive, NgModule } from '@angular/core';

var DynamicWidthDirective = /** @class */ (function () {
    function DynamicWidthDirective(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    DynamicWidthDirective.prototype.ngOnInit = function () {
        var _this = this;
        var element = this.elementRef.nativeElement;
        var tag = element.tagName.toLowerCase();
        if (tag === 'input' || tag === 'textarea') {
            this.element = element;
            this.unsubscribe = this.renderer.listen(this.elementRef.nativeElement, 'keyup', function () {
                _this.adjustWidth();
            });
            setTimeout(function () {
                _this.adjustWidth();
            }, 10);
        }
    };
    DynamicWidthDirective.prototype.ngOnDestroy = function () {
        if (!this.unsubscribe) {
            return;
        }
        this.unsubscribe();
    };
    // Public metoda pro "manualni" prepočet šířky, když se změní model. Input sám o změně bohužel neví
    // Programátor na to musí pamatovat :(
    DynamicWidthDirective.prototype.triggerRecalculate = function () {
        var _this = this;
        setTimeout(function () {
            _this.adjustWidth();
        });
    };
    DynamicWidthDirective.prototype.adjustWidth = function () {
        var _a = this.params, minWidth = _a.minWidth, maxWidth = _a.maxWidth;
        if (!minWidth || !maxWidth) {
            return;
        }
        var fakeElement = document.createElement('span');
        fakeElement.textContent = this.element.value;
        // Firefox has annonying behaviour. It does not know the "shortcut properties" like 'font' or 'padding'
        // You have to type the full property name.
        var styleProps = [
            'font-size',
            'font-family',
            'letter-spacing',
            'line-height',
            'padding-left',
            'padding-height',
        ];
        var style = getComputedStyle(this.elementRef.nativeElement);
        styleProps.forEach(function (prop) {
            fakeElement.style[prop] = style[prop];
        });
        // get width
        fakeElement.style.visibility = 'hidden';
        document.body.append(fakeElement);
        var width = fakeElement.offsetWidth;
        fakeElement.remove();
        if (width > maxWidth) {
            width = maxWidth - 15;
        }
        if (width > minWidth && width <= maxWidth) {
            // 26px is "buffer", so that the text-ellipsis is not shown.
            // It used to be 18px. It seems that Chrome has changed behaviour of input boxes.
            this.element.style.width = width + 26 + "px";
        }
    };
    DynamicWidthDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    __decorate([
        Input('dynamicWidth')
    ], DynamicWidthDirective.prototype, "params", void 0);
    DynamicWidthDirective = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[dynamicWidth]',
        })
    ], DynamicWidthDirective);
    return DynamicWidthDirective;
}());

var DynamicInputModule = /** @class */ (function () {
    function DynamicInputModule() {
    }
    DynamicInputModule = __decorate([
        NgModule({
            declarations: [DynamicWidthDirective],
            imports: [],
            exports: [DynamicWidthDirective],
        })
    ], DynamicInputModule);
    return DynamicInputModule;
}());

/*
 * Public API Surface of dynamic-input
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DynamicInputModule, DynamicWidthDirective };
//# sourceMappingURL=dynamic-input-width.js.map
